(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{248:function(t,s,r){t.exports=r.p+"assets/img/规则引擎.2388f635.png"},429:function(t,s,r){"use strict";r.r(s);var a=r(3),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"组合模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[t._v("#")]),t._v(" 组合模式")]),t._v(" "),s("h3",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。")]),t._v(" "),s("p",[t._v("这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。")]),t._v(" "),s("p",[t._v("将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。")]),t._v(" "),s("p",[s("strong",[t._v("应用场景")])]),t._v(" "),s("p",[t._v("部分、整体场景，如树形菜单，文件、文件夹的管理。")]),t._v(" "),s("p",[t._v("多级菜单树：父节点中包含了其子类菜单集合，其子类也可以是父类，这样一层包含一层，便成了一棵菜单树")]),t._v(" "),s("p",[t._v("规则引擎：通过配置的规则找到最终的叶子结点 这个案例可以看"),s("strong",[t._v("小傅哥的重写设计模式")])]),t._v(" "),s("p",[s("img",{attrs:{src:r(248),alt:"../../../img//other/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E.png"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);