(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{334:function(e,t,r){"use strict";r.r(t);var a=r(3),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[e._v("#")]),e._v(" 工厂模式")]),e._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),t("p",[e._v("是一种创建型设计模式 ,工厂方法模式基于“输入”，应用在超类和多个子类之间的情况，这种模式将创建对象的责任转移到工厂类； 超类可以是接口、抽象类、父类; 超类有多个子类时,工厂类通过“输入”的信息, 返回对应的子类实例 将实例的获取和应用区分开")]),e._v(" "),t("p",[t("strong",[e._v("场景")]),e._v(": 当一个超类有不同的实现, 并且业务中需要根据情况获取不同实例时")]),e._v(" "),t("p",[t("strong",[e._v("优点")]),e._v(": 拓展性高, 如果新增一个子类, 只需在工厂类添加对应的映射关系即可")]),e._v(" "),t("h3",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),t("p",[e._v("以发放奖品为例, 奖品有不同的类型,有实物奖品(需要快递发放),有优惠券(发放给对应的账号)等等, 当用户抽取到了奖品后,根据奖品类型去发放")]),e._v(" "),t("p",[t("strong",[e._v("项目结构")])]),e._v(" "),t("p",[e._v("对应"),t("strong",[e._v("a01_factoryPattern")]),e._v("包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── prize\n│   ├── impl\n│   │   ├── PrizeServiceA.java\n│   │   ├── PrizeServiceB.java\n│   └── Iprize.java\n└── PrizeFactory.java\n")])])]),t("p",[t("img",{attrs:{src:"/img/other/test1.png",alt:"/img/other/test1.png"}})]),e._v(" "),t("p",[e._v("test1")]),e._v(" "),t("p",[t("strong",[e._v("超类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/** * 奖品接口 */public interface IPrize {    /**     * 发奖接口     */    void send();    /**     * 取消接口     */    void cancel();}\n")])])]),t("p",[t("strong",[e._v("具体实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/** * 发放实体奖品 */@Componentpublic class PrizeServiceA implements IPrize {    @Override    public void send() {        System.out.println("发放实体奖品");    }    @Override    public void cancel() {        System.out.println("取消实体奖品");    }}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/** * 发放虚拟奖品 */@Componentpublic class PrizeServiceB implements IPrize {    @Override    public void send() {        System.out.println("发放虚拟奖品");    }    @Override    public void cancel() {        System.out.println("取消虚拟奖品");    }}\n')])])]),t("p",[t("strong",[e._v("工厂类")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/** * 工厂 */@Componentpublic class PrizeFactory {    private Map<Integer, IPrize> prizeMap = new ConcurrentHashMap();    @Resource    PrizeServiceA prizeServiceA;    @Resource    PrizeServiceB prizeServiceB;    @PostConstruct    public void init() {        //这里1 2 不符合规范，可以写到枚举中        prizeMap.put(1, prizeServiceA);        prizeMap.put(2, prizeServiceB);    }    public IPrize get(Integer type){        return prizeMap.get(type);    }}\n")])])]),t("p",[t("strong",[e._v("模拟使用")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//模拟业务代码通过ifelse实现void ifElse(int type){    //...其他业务代码    if (type==1){        prizeServiceA.send();    }else if (type==2){        prizeServiceB.send();    }    //...其他业务代码}//模拟使用工厂实现void factory(int type){    //...其他业务代码    IPrize iPrize = prizeFactory.get(type);    iPrize.send();    //...其他业务代码}\n")])])]),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("工厂模式方便我们动态获取不同的实例, 同时在拓展时将影响范围缩小")])])}),[],!1,null,null,null);t.default=s.exports}}]);