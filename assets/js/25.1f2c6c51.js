(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{337:function(a,t,e){a.exports=e.p+"assets/img/image-20220110145926901.5031ae4e.png"},428:function(a,t,e){"use strict";e.r(t);var s=e(3),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"桥接模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[a._v("#")]),a._v(" 桥接模式")]),a._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("p",[a._v("桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。")]),a._v(" "),t("p",[a._v("这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。")]),a._v(" "),t("p",[a._v("它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。")]),a._v(" "),t("p",[a._v("妈耶 这个更抽象。。。")]),a._v(" "),t("p",[a._v("当一个对象有多个维度的变化时：比如又不同种类的车，车又有不同的颜色；")]),a._v(" "),t("p",[t("strong",[a._v("这一块小傅哥博客中讲的很好理解")])]),a._v(" "),t("p",[t("img",{attrs:{src:e(337),alt:"../../../img//other/image-20220110145926901.png"}})]),a._v(" "),t("p",[a._v("image-20220110145926901")]),a._v(" "),t("p",[a._v("以支付为例, 平台有微信和支付宝, 身份验证有人脸,指纹,密码 我们不可能组合写6种具体实现,")]),a._v(" "),t("p",[a._v("那按照支付平台和身份验证拆分单独使用")]),a._v(" "),t("p",[a._v("两个模块又需要通过一个连接点组合起来, 首先分析"),t("strong",[a._v("身份验证")]),a._v("可能很多地方都会使用, 但是"),t("strong",[a._v("支付平台")]),a._v("一定会用到身份验证, 所以要将"),t("strong",[a._v("身份验证")]),a._v("添加到"),t("strong",[a._v("支付平台")]),a._v("中")]),a._v(" "),t("p",[a._v("即"),t("strong",[a._v("支付平台")]),a._v("中有一个属性 便是"),t("strong",[a._v("身份验证")]),a._v(", 每个"),t("strong",[a._v("支付平台")]),a._v("的实现类在构建时需要传入"),t("strong",[a._v("身份验证")]),a._v("对象表明使用什么认证方式")]),a._v(" "),t("p",[a._v("便成了"),t("strong",[a._v("抽象类依赖实现类")])]),a._v(" "),t("h3",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),t("p",[a._v("支付平台和认证方式个抽取一个超类， 然后做不同的实现子类")]),a._v(" "),t("p",[a._v("由于我们定义支付平台对象包含认证方式，所以支付平台的超类是个抽象类，里面有个 认证方式 类型的属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("├── channel\n│   ├── Pay.java\n│   ├── WxPay.java\n│   └── ZfbPay.java\n└── mode\n        ├── IPayMode.java\n        ├── PayCypher.java\n    ├── PayFaceMode.java\n    └── PayFingerprintMode.java\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("public abstract class Pay {    protected Logger logger = LoggerFactory.getLogger(Pay.class);    protected IPayMode payMode;    public Pay(IPayMode payMode) {        this.payMode = payMode;    }    public abstract String transfer(String uId, String tradeId, BigDecimal amount);}\n")])])]),t("p",[a._v("使用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//微信-人脸支付Pay wxPay = new WxPay(new PayFaceMode());\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);