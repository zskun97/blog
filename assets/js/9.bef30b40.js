(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{323:function(t,v,_){"use strict";_.r(v);var p=_(3),o=Object(p.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"ddd抽奖系统学习打卡🚀-day-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ddd抽奖系统学习打卡🚀-day-4"}},[t._v("#")]),t._v(" DDD抽奖系统学习打卡🚀 day 4")]),t._v(" "),v("p",[t._v("Created: January 30, 2022 8:54 AM")]),t._v(" "),v("p",[t._v("S：周末果然最适合 睡懒觉了 哈哈哈。不能懈怠 起来干")]),t._v(" "),v("p",[t._v("T：主要是把昨天欠的规则引擎补上，在继续往下看几张")]),t._v(" "),v("p",[t._v("A：规则引擎我有点先入为主了，因为什么二叉树红黑树最头疼了，昨天看文档中的sql不知道每个表是干啥的，所以感觉很深奥，看文档也没看进去，今天一步步跟了源码，是我想多哈哈哈 不知道大家有没有没看明白的，梳理了流程 图会放下面")]),t._v(" "),v("p",[t._v("R：")]),t._v(" "),v("p",[t._v("第13节 梳理了规则引擎的流程，不能急躁，静下心来一步步从头到尾知道了全流程，才能驾轻就熟 因为梳理有图穿插文字所以生成图片放下面了")]),t._v(" "),v("p",[t._v("第15 16节")]),t._v(" "),v("p",[t._v("简单学习了kafka的使用和spingboot的使用，之前用的最多的rabbitmq看过一点rocketmq，其实springboot都封装好了收发使用上没啥太大差别，不过还是需要再去了解学习，小傅哥文档中命令给的很细，跟着用测试项目没问题")]),t._v(" "),v("p",[t._v("第17节")]),t._v(" "),v("p",[t._v("学习xxl job的使用，看了小傅哥写的定时任务中间件，好厉害啊，而且还是刚接触springboot一个月")]),t._v(" "),v("p",[t._v("看了一下小傅哥的定时任务中间件，大概原理是不是服务启动时将那些添加了注解的方法作为任务挂在到以服务的ip地址为节点下，然后服务监听自己的节点通过springboot的CronTask在服务本地注册/注销定时任务呢")]),t._v(" "),v("p",[t._v("这样的话，如果同一个服务部署了两个实例，到达约定时间后，两个实例就会执行相同的动作吧？")]),t._v(" "),v("p",[t._v("如果想只有一个服务执行，在zookeeper中可以根据服务进行分组然后分配一个ip去执行（自己一个想法哈哈哈）不过还要针对任务分配做个永久节点维护，当分配的服务宕机后其对应临时节点销毁，其他服务监听到之后重新选择（有点像通过zookeeper做选举一样，谁的临时顺序节点编号靠前，就选择谁），重新给给任务分配一个服务去执行")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img/other/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E.png",alt:"/img/other/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E.png"}})]),t._v(" "),v("p",[t._v("规则引擎")])])}),[],!1,null,null,null);v.default=o.exports}}]);