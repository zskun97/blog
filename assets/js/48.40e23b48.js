(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{362:function(e,a,t){"use strict";t.r(a);var s=t(3),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[e._v("#")]),e._v(" Elasticsearch")]),e._v(" "),a("h1",{attrs:{id:"基础操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础操作"}},[e._v("#")]),e._v(" 基础操作")]),e._v(" "),a("p",[e._v("索引(index)-类型(type)-数据(id)")]),e._v(" "),a("h2",{attrs:{id:"cat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cat"}},[e._v("#")]),e._v(" _cat")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GET /_cat/nodes     查看节点信息\nGET /_cat/health    查看es健康状态\nGET /_cat/master    查看主节点信息\nGET /_cat/indlces   查看所有索引\n\n")])])]),a("h2",{attrs:{id:"保存文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存文档"}},[e._v("#")]),e._v(" 保存文档")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('PUT或POST都可以  /customer/external/1       customer索引,external类型,记录id为1{    "name":"donny"}多次请求是更新操作PUT新增必须带ID, POST不带ID会自动生产\n')])])]),a("h2",{attrs:{id:"查询文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询文档"}},[e._v("#")]),e._v(" 查询文档")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GET    /customer/external/1                获取customer下external类型中记录id为1的数据\n")])])]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"_index"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"customer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//哪个索引    "_type": "external",        //哪个类型,7.0之后不建议使用类型,8.0之后就去掉了    "_id": "2",                 //记录id    "_version": 4,              //版本号    "_seq_no": 7,               //并发控制字段,每次更新都加1(这个递增针对所有数据的操作都共用一个序列号),用来做乐观锁    "_primary_term": 1,         //    "found": true,    "_source": {                //真正的数据        "name": "donny"    }}')]),e._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("?if_seq_no=12&if_primary_term=1     请求后面拼接参数,用来判断seq_no和primary_term,匹配相同才会执行\n")])])]),a("h2",{attrs:{id:"更新文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新文档"}},[e._v("#")]),e._v(" 更新文档")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('POST   /customer/external/1/_update{    "doc":{        "name":"donny"    }}或者不加_update,像创建文档一样直接post或者put更新区别:post带_update会对比原来数据, 如果数据相同则不执行操作,而put或者post不带_update, 会直接修改带_update时只会对你传的属性进行判断和操作影响,而不带_update是直接将整个文档覆盖,比如只传一个属性age,那么_update的会补充这个属性不影响其他属性,而不带时是直接将整个doc覆盖只有age属性.\n')])])]),a("h2",{attrs:{id:"删除文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除文档"}},[e._v("#")]),e._v(" 删除文档")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DELETE   /customer/external/1      删除指定的记录id的文档\nDELETE   /customer                 直接删除索引, 没有直接删除类型的操作\n")])])]),a("h2",{attrs:{id:"批量操作文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批量操作文档"}},[e._v("#")]),e._v(" 批量操作文档")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('POST   /customer/external/_bulk{"index":{"_id":"1"}}{"name":"danny"}{"index":{"_id":"2"}}{"name":"jane"}语法格式:{"action":{metadata}}        //操作  源数据(也就是知名索引,类型,id啥的, 如果路径上索引则这里可以不写){"name":"danny"}             //文档本身POST   /_bulk//删除记录{"delete":{"_index":"customer","_type":"external","_id":"1"}}//创建记录{"create":{"_index":"customer","_type":"external","_id":"1"}}{"name":"danny"}//插入记录{"index":{"_index":"customer","_type":"external","_id":"1"}}{"name":"danny"}//更新记录{"update":{"_index":"customer","_type":"external","_id":"1"}}{"doc":{"name":"danny"}}\n')])])]),a("h1",{attrs:{id:"进阶操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶操作"}},[e._v("#")]),e._v(" 进阶操作")]),e._v(" "),a("h2",{attrs:{id:"query-dsl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-dsl"}},[e._v("#")]),e._v(" Query DSL")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{  "query": { "match_all": {} },    //查询条件     match_all匹配所有  "sort": [                        //排序规则, 可以有组合排序    { "account_number": "asc" }    //根据account_number升序排列  ],  "from": 10,       //从第10条开始  "size": 10        //取10条记录}\n')])])]),a("h3",{attrs:{id:"_1-match-匹配查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-match-匹配查询"}},[e._v("#")]),e._v(" 1. match 匹配查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{  "query": {    "match": {                     //全文检索,按照评分排序,会对检索条件进行分词匹配        "address": "mill lane"      //address属性中包含mill或lane都会被评分后返回,对于数字的会精确匹配    }  }}\n')])])]),a("h3",{attrs:{id:"_2-match-phrase-短语匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-match-phrase-短语匹配"}},[e._v("#")]),e._v(" 2. match_phrase 短语匹配")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{  "query": {    "match_phrase": {                //不会对检索条件进行分词匹配        "address": "mill lane"      //address属性中包含"mill lane"都会被评分后返回,对于数字的会精确匹配    }  }}\n')])])]),a("h3",{attrs:{id:"_3-multi-match多字段匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-multi-match多字段匹配"}},[e._v("#")]),e._v(" 3. multi_match多字段匹配")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{  "query": {    "multi_match": {      "query": "Mill Road",             //检索条件, 会进行分词      "fields": ["address","email"]     //需要检索的字段    }  }}\n')])])]),a("h3",{attrs:{id:"_4-bool复合查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-bool复合查询"}},[e._v("#")]),e._v(" 4. bool复合查询")]),e._v(" "),a("p",[e._v("复合语句可以合并任何其他查询语句, 包括复合语句")]),e._v(" "),a("p",[e._v("must, must_not, should 都会影响相关性的得分")]),e._v(" "),a("p",[e._v("filter过滤不会影响相关性得分")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{\n  "query": {\n    "bool": {\n      "must": [\n         //必须满足的\n        { "match": { "gender": "m" } }\n      ],\n      "must_not": [\n      //必须不满足的\n        { "match": { "state": "tn" } }\n      ],\n      "should": [\n       //应该满足的不满足也行\n        {"match":{"age":32}}\n      ],\n      "filter": {\n        "range": {\n    //区间\n          "balance": {\n            "gte": 20000,\n            "lte": 30000\n          }\n        }\n      }\n    }\n  }}\n')])])]),a("h3",{attrs:{id:"_5-filter-过滤查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-filter-过滤查询"}},[e._v("#")]),e._v(" 5.filter 过滤查询")]),e._v(" "),a("p",[e._v("filter过滤不会影响相关性得分, 看第四条")]),e._v(" "),a("h3",{attrs:{id:"_6-term精确匹配查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-term精确匹配查询"}},[e._v("#")]),e._v(" 6.term精确匹配查询")]),e._v(" "),a("p",[e._v("精确检索的推荐term, 文本字段不推荐")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('GET /bank/_search{  "query": {    "term": {      "age":"28"    }  }}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//如果文本也要精确匹配不分词, 那么可以使用address.keyword作为key, 进行精准匹配完成相同才会返回//与match_phrase的区别是, match_phrase是短语匹配,只是包含该短语即可GET /bank/_search{  "query": {    "match": {      "address.keyword":"789 Madison Street"    }  }}\n')])])]),a("h3",{attrs:{id:"aggregations-聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aggregations-聚合"}},[e._v("#")]),e._v(" Aggregations 聚合")]),e._v(" "),a("h3",{attrs:{id:"关于"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[e._v("#")]),e._v(" 关于")]),e._v(" "),a("p",[e._v("Aggregations的部分特性类似于SQL语言中的group by，avg，sum等函数。但Aggregations API还提供了更加复杂的统计分析接口。")]),e._v(" "),a("p",[e._v("掌握Aggregations需要理解两个概念：")]),e._v(" "),a("ul",[a("li",[e._v("桶(Buckets)：符合条件的文档的集合，相当于SQL中的group by。比如，在users表中，按“地区”聚合，一个人将被分到北京桶或上海桶或其他桶里；按“性别”聚合，一个人将被分到男桶或女桶")]),e._v(" "),a("li",[e._v("指标(Metrics)：基于Buckets的基础上进行统计分析，相当于SQL中的count,avg,sum等。比如，按“地区”聚合，计算每个地区的人数，平均年龄等")])]),e._v(" "),a("p",[e._v("GROUP BY相当于做分桶的工作，COUNT是统计指标。")]),e._v(" "),a("h3",{attrs:{id:"metrics-指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metrics-指标"}},[e._v("#")]),e._v(" Metrics 指标")]),e._v(" "),a("p",[e._v("AVG //平均值")]),e._v(" "),a("p",[e._v("Cardinality //求基数,比如所有人中age共分了几组")]),e._v(" "),a("p",[e._v("stats //统计,会得出count, max,min,avg,sum")]),e._v(" "),a("h3",{attrs:{id:"bucket-桶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bucket-桶"}},[e._v("#")]),e._v(" Bucket 桶")]),e._v(" "),a("p",[e._v("terms //聚合,每个分组中的元素数量")]),e._v(" "),a("h3",{attrs:{id:"单个聚合或者多个平级聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单个聚合或者多个平级聚合"}},[e._v("#")]),e._v(" 单个聚合或者多个平级聚合")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//搜索address中包含mill的人的年龄分布以及平均年龄\nGET bank/_search{\n  "query":{\n    "match": {\n      "address": "mill"\n    }\n  },\n  "aggs": {\n    "ageagg": {\n             //第一个聚合的名称\n      "terms": {\n            //聚合类型\n        "field": "age",\n        "size": 100\n         //\n      }\n    },\n    "ageavg":{\n             //第二个聚合的名称\n      "avg": {\n        "field": "age"\n      }\n    }\n  },\n  "size":0\n}\n')])])]),a("p",[e._v("查询结果:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{  "took" : 1,  "timed_out" : false,  "_shards" : {    "total" : 1,    "successful" : 1,    "skipped" : 0,    "failed" : 0  },  "hits" : {    "total" : {      "value" : 4,      "relation" : "eq"    },    "max_score" : null,    "hits" : [ ]  },  "aggregations" : {    "ageagg" : {                                      //聚合名称      "doc_count_error_upper_bound" : 0,      "sum_other_doc_count" : 0,      "buckets" : [                                   //桶, 下面key便是各种值,doc_count是每种值对应的个数        {          "key" : 38,          "doc_count" : 2        },        {          "key" : 28,          "doc_count" : 1        },        {          "key" : 32,          "doc_count" : 1        }      ]    },    "ageavg" : {                                 //第二个聚合      "value" : 34.0    }  }}\n')])])]),a("h3",{attrs:{id:"父子级聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子级聚合"}},[e._v("#")]),e._v(" 父子级聚合")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##按照年龄聚合,每个年龄的平均薪资和该年龄男女的人数及平均薪资\nGET bank/_search{\n  "query":{\n    "match_all": {}\n  },\n  "aggs": {\n                  \n      //第一级聚合,根据年龄分组\n    "ageagg": {\n      "terms": {\n        "field": "age",\n        "size": 100\n      },\n      "aggs": {\n                             \n//第二级聚合\n        "balanceavg": {\n          "avg": {\n                          //第二级聚合,1. 求这个年龄段所有人的平均薪资\n            "field": "balance"\n          }\n        },\n        "genderagg":{\n                       //第二级聚合,2. 根据性别再分组\n          "terms": {\n            "field": "gender.keyword", //terms精确匹配,文本字段需要使用.keyword            "size": 10\n          },\n          "aggs": {\n                                     //第三级聚合,该性别分组下的平均薪资\n            "balanceavg": {\n              "avg": {\n                "field": "balance"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n,  "size": 0}\n')])])]),a("p",[e._v("聚合结果:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('   //截取结果中一级分类中一个桶元素分析, 个人粗俗理解    "buckets" : [        {          "key" : 31,                       //一级聚合后一个桶          "doc_count" : 61,                 //该桶的元素数量          "genderagg" : {            "doc_count_error_upper_bound" : 0,            "sum_other_doc_count" : 0,            "buckets" : [                         //二级聚合 2.根据性别再分组              {                "key" : "M",                "doc_count" : 35,                "balanceavg" : {                            //三级聚合                  "value" : 29565.628571428573                }              },              {                "key" : "F",                "doc_count" : 26,                "balanceavg" : {                  "value" : 26626.576923076922                }              }            ]          },          "balanceavg" : {                    //二级聚合 1. 求这个年龄段所有人的平均薪资            "value" : 28312.918032786885          }        },        .......]\n')])])]),a("h2",{attrs:{id:"mapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapping"}},[e._v("#")]),e._v(" Mapping")]),e._v(" "),a("p",[e._v("Mapping是用来定义一个文档(document), 以及它所包含的属性(field)是如何存储和索引的. 比如使用mapping来定义: 哪些字符属性应该被看作是全文本属性(full text fields) 哪些属性包含数字,日期或者地理位置 文档中所有的属性是否都能被索引 (_all 配置) 日期的格式 自定义映射规则来执行动态添加属性")]),e._v(" "),a("h3",{attrs:{id:"查看mapping信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看mapping信息"}},[e._v("#")]),e._v(" 查看mapping信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GET bank/_mapping\n")])])]),a("h3",{attrs:{id:"创建映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建映射"}},[e._v("#")]),e._v(" 创建映射")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//创建新的索引,并指定映射PUT /my_index{  "mappings": {    "properties":{      "age": {"type": "integer"},      "email": {"type": "keyword"},      "name": {"type": "text"}    }  }}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//向索引中追加一个属性PUT /my_index/_mapping{  "properties": {    "lick": {      "type": "text",      "index":false     //index控制这个值能不能被索引,默认是true, 如果设置false那么这个字段不能被检索    }  }}\n')])])]),a("p",[e._v("对于已经存在的属性字段是不能被更新映射的, 只能新建一个索引, 然后进行数据迁移")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//数据迁移POST _reindex{  "source": {           //来源  如果没有type可以不指定    "index": "bank",    "type": "account"  },  "dest": {             //目标    "index": "newbank"  }}\n')])])]),a("h2",{attrs:{id:"分词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分词"}},[e._v("#")]),e._v(" 分词")]),e._v(" "),a("p",[e._v("一个tokenizer(分词器) 接收一个字符流, 将之分割为独立的tokens(词元, 通常是独立的单词) , 然后输出tokens流")]),e._v(" "),a("h3",{attrs:{id:"安装ik分词器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装ik分词器"}},[e._v("#")]),e._v(" 安装ik分词器")]),e._v(" "),a("p",[e._v("需要安装对应es版本的ik分词器")]),e._v(" "),a("p",[e._v("https://github.com/medcl/elasticsearch-analysis-ik/releases 从github找对应版本")]),e._v(" "),a("p",[e._v("解压在plugin目录下")]),e._v(" "),a("p",[e._v("elasticsearch-plugin list 查看安装好的插件, 重启")]),e._v(" "),a("p",[e._v("使用分词器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//ik_smart, 结果: 我 是 中国人\nPOST _analyze\n{\n  "analyzer": "ik_smart",\n  "text": "我是中国人"\n}\n\n//ik_max_word, 最大分词组合,结果:我 是 中国人 中国 国人\nPOST _analyze\n{\n  "analyzer": "ik_max_word",\n  "text": "我是中国人"\n}\n')])])]),a("h3",{attrs:{id:"自定义拓展词库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义拓展词库"}},[e._v("#")]),e._v(" 自定义拓展词库")]),e._v(" "),a("p",[e._v("修改plugins/ik/config/中的IKAnalyzer.cfg.xml文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<properties>        <comment>IK Analyzer 扩展配置</comment>        \x3c!--用户可以在这里配置自己的扩展字典,文件要放在config目录下 --\x3e        <entry key="ext_dict">fenci.text</entry>         \x3c!--用户可以在这里配置自己的扩展停止词字典--\x3e        <entry key="ext_stopwords"></entry>        \x3c!--用户可以在这里配置远程扩展字典,指定远程文件地址--\x3e        \x3c!--<entry key="remote_ext_dict">http://119.45.176.143/es/fenci.text</entry>--\x3e        \x3c!--用户可以在这里配置远程扩展停止词字典--\x3e        \x3c!-- <entry key="remote_ext_stopwords">words_location</entry> --\x3e</properties>\n')])])]),a("h1",{attrs:{id:"elasticsearch-rest-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-rest-client"}},[e._v("#")]),e._v(" Elasticsearch-Rest-Client")]),e._v(" "),a("p",[a("strong",[e._v("9300 : tcp")])]),e._v(" "),a("p",[e._v("spring-data-elasticsearch:transport-api.jar")]),e._v(" "),a("p",[e._v("springboot版本不同， transport-api.jar不同 不能适配es版本")]),e._v(" "),a("p",[e._v("7.x已经不建议使用,8以后就要废弃")]),e._v(" "),a("p",[a("strong",[e._v("9200 : http")])]),e._v(" "),a("p",[e._v("jestClient: 非官方, 更新慢")]),e._v(" "),a("p",[e._v("RestTemplate: 模拟发HTTP请求, ES很多操作需要自己封装,麻烦")]),e._v(" "),a("p",[e._v("HttpClient: 同上")]),e._v(" "),a("p",[e._v("Elasticsearch-Rest-Client: 官方RestClient, 封装es操作, API层次分明, 上手简单")]),e._v(" "),a("h2",{attrs:{id:"整合springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整合springboot"}},[e._v("#")]),e._v(" 整合springboot")]),e._v(" "),a("p",[e._v("https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html")]),e._v(" "),a("h3",{attrs:{id:"导入包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入包"}},[e._v("#")]),e._v(" 导入包")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>    <groupId>org.elasticsearch.client</groupId>    <artifactId>elasticsearch-rest-high-level-client</artifactId>    <version>7.4.2</version></dependency>\n")])])]),a("h3",{attrs:{id:"写配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写配置"}},[e._v("#")]),e._v(" 写配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configurationpublic class ElasticsearchConfig {    //配置RequestOptions    public static final RequestOptions COMMON_OPTIONS;    static {        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();//        builder.addHeader("Authorization", "Bearer " + TOKEN);//        builder.setHttpAsyncResponseConsumerFactory(//                new HttpAsyncResponseConsumerFactory//                        .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));        COMMON_OPTIONS = builder.build();    }    //给容器中注入一个RestHighLevelClient    @Bean    public RestHighLevelClient esRestClient() {//        RestHighLevelClient client = new RestHighLevelClient(//                RestClient.builder(//                        new HttpHost("119.45.176.143", 9200, "http")));        RestClientBuilder builder = null;        builder = RestClient.builder(new HttpHost("119.45.176.143", 9200, "http"));        RestHighLevelClient client = new RestHighLevelClient(builder);        return client;    }}\n')])])]),a("h3",{attrs:{id:"存储数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储数据"}},[e._v("#")]),e._v(" 存储数据")]),e._v(" "),a("p",[e._v("同一个id多次执行是更新操作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    //导入配置类中的client对象    @Autowired    RestHighLevelClient client;    public void indexData() throws IOException {        //创建插入请求        IndexRequest indexRequest = new IndexRequest("users");        indexRequest.id("1");  //数据的is        //indexRequest.source("username","张三","age","18","gender","男");        User user = new User();        user.setUserName("张三");        user.setAge(18);        user.setGender("男");        String string = JSON.toJSONString(user);        indexRequest.source(string, XContentType.JSON);   //要保存的内容        //执行操作        IndexResponse index = client.index(indexRequest, ElasticsearchConfig.COMMON_OPTIONS);        //提取响应数据        System.out.println(index);    }\n')])])]),a("h3",{attrs:{id:"复杂检索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂检索"}},[e._v("#")]),e._v(" 复杂检索")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//按照年龄聚合,每个年龄的平均薪资和该年龄男女的人数及平均薪资    public void searchData() throws IOException {        //创建检索请求        SearchRequest searchRequest = new SearchRequest();        //指定索引        searchRequest.indices("bank");        //指定DSL, 检索条件        //SearchSourceBuilder sourceBuilder   封装的检索条件        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();        //1.1) 构建检索条件  sourceBuilder下都是些根操作:query  from  size  aggregation  sort等        //按照年龄聚合,每个年龄的平均薪资和该年龄男女的人数及平均薪资        sourceBuilder.query(QueryBuilders.matchAllQuery()).size(5);        //根据age分组        TermsAggregationBuilder ageagg = AggregationBuilders.terms("ageagg").field("age")                .subAggregation(AggregationBuilders.avg("balanceavg").field("balance"))                .subAggregation(AggregationBuilders.terms("genderagg").field("gender.keyword")                        .subAggregation(AggregationBuilders.avg("balanceavg").field("balance")));        sourceBuilder.aggregation(ageagg);        //1.2) 向检索请求中放入检索条件        searchRequest.source(sourceBuilder);        System.out.println("检索条件:"+sourceBuilder);        //2.执行检索        SearchResponse search = client.search(searchRequest, ElasticsearchConfig.COMMON_OPTIONS);        //3.分析结果        System.out.println("检索结果:"+search);        System.out.println("命中文档数量:"+search.getHits().getTotalHits().value);        //3.1) 获取所有命中的记录        SearchHit[] hits = search.getHits().getHits();        for (SearchHit hit : hits) {            //将string转成对象            account account = JSON.parseObject(hit.getSourceAsString(), account.class);            System.out.println("检索到的account:"+account);        }        //3.2) 获取分析结果        //获取所有聚合结果        Aggregations aggregations = search.getAggregations();        //如果聚合是用的term,那就用terms接收        Terms ageagg1 = aggregations.get("ageagg");        for (Terms.Bucket bucket : ageagg1.getBuckets()) {            String key=bucket.getKeyAsString();            long docCount = bucket.getDocCount();            //获取子聚合            Aggregations aggregations1 = bucket.getAggregations();            //获取该年龄段所有的人的平均值            Avg balanceavg = aggregations1.get("balanceavg");            double balanceavgValue = balanceavg.getValue();            //获取该年龄段性别分组            Terms genderagg = aggregations1.get("genderagg");            long manNum = 0;            double manBalanceavgValue = 0;            long womanNum = 0;            double womanBalanceavgValue = 0;            for (Terms.Bucket genderaggBucket : genderagg.getBuckets()) {                //获取该性别下平均值                Avg balanceavg1 = genderaggBucket.getAggregations().get("balanceavg");                if(genderaggBucket.getKeyAsString().equals("M")){                    manNum = genderaggBucket.getDocCount();                    manBalanceavgValue = balanceavg1.getValue();                }else{                    womanNum = genderaggBucket.getDocCount();                    womanBalanceavgValue = balanceavg1.getValue();                };            }            System.out.println("分析结果:"+"年龄"+key+"岁共有"+docCount+"人,平均薪资"+balanceavgValue+"元" +                    ",其中男性"+manNum+"人,平均薪资"+manBalanceavgValue+"元"+                    ",女性"+womanNum+"人,平均薪资"+womanBalanceavgValue+"元");        }    }\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);