(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{331:function(t,v,_){t.exports=_.p+"assets/img/image-86b1606cc60344b1b36f4acbf89dab3f.8ca55a4b.png"},332:function(t,v,_){t.exports=_.p+"assets/img/image-20220111214810025.25a78147.png"},419:function(t,v,_){"use strict";_.r(v);var r=_(3),s=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),v("h3",{attrs:{id:"设计模式六大原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式六大原则"}},[t._v("#")]),t._v(" 设计模式六大原则")]),t._v(" "),v("p",[v("strong",[t._v("1.单一原则")]),t._v("（Single Responsibility Principle）：一个类或者一个方法只负责一项职责，尽量做到类的只有一个行为原因引起变化；")]),t._v(" "),v("p",[v("strong",[t._v("2.里氏替换原则")]),t._v("（LSP liskov substitution principle）：子类可以扩展父类的功能，但不能改变原有父类的功能；")]),t._v(" "),v("p",[v("strong",[t._v("3.依赖倒置原则（dependence inversion principle）")]),t._v("：面向接口编程；")]),t._v(" "),v("p",[v("strong",[t._v("4.接口隔离（interface segregation principle）")]),t._v("：建立单一接口；（扩展为类也是一种接口，一切皆接口）")]),t._v(" "),v("p",[v("strong",[t._v("5.迪米特原则（law of demeter LOD）")]),t._v("：最少知道原则，尽量降低类与类之间的耦合；")]),t._v(" "),v("p",[v("strong",[t._v("6.开闭原则（open closed principle）")]),t._v("：用抽象构建架构，用实现扩展原则；")]),t._v(" "),v("hr"),t._v(" "),v("p",[v("strong",[t._v("创建型模式")]),t._v(": 对象的创建 调用方怎么得到一个对象")]),t._v(" "),v("p",[t._v("这类模式提供创建对象的机制, 能够提升已有代码的灵活性和可复用性")]),t._v(" "),v("p",[v("strong",[t._v("带入场景")]),t._v(": A是需求方, A需要一个对象时, 我们怎么去提供 (这个对象不是 new String() 就完事那种 , 他可能有多个实现类或者结构复杂等等)")]),t._v(" "),v("p",[v("img",{attrs:{src:_(331),alt:"../../img/other/image-86b1606cc60344b1b36f4acbf89dab3f.png"}})]),t._v(" "),v("hr"),t._v(" "),v("p",[v("strong",[t._v("结构型模式")]),t._v(": 对象的结构, 对象内部的结构设计")]),t._v(" "),v("p",[t._v("这类模式介绍如何将对象和类组成较大的结构, 并同时保持结构的灵活和高效")]),t._v(" "),v("p",[v("strong",[t._v("带入场景")]),t._v(": 好比我们自己的房屋怎么布局, 才能住的更方便, 考虑一个对象的内部结构")]),t._v(" "),v("p",[v("img",{attrs:{src:_(332),alt:"../../img/other/image-20220111214810025.png"}})]),t._v(" "),v("hr"),t._v(" "),v("p",[v("strong",[t._v("行为型模式")]),t._v(": 对象的行为, 对象的行为方式")]),t._v(" "),v("p",[t._v("各种模式不是相互独立的, 工厂是为了获取其他的对象, 但是同时工厂也是一个对象,他也有创建,结构,行为")]),t._v(" "),v("p",[t._v("这类模式负责对象间的高效沟通和职责委派")]),t._v(" "),v("p",[v("strong",[t._v("带入场景")]),t._v(": 我们去做一件事情")]),t._v(" "),v("hr")])}),[],!1,null,null,null);v.default=s.exports}}]);