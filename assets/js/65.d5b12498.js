(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{461:function(e,a,s){"use strict";s.r(a);var t=s(3),r=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"k8s学习笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s学习笔记"}},[e._v("#")]),e._v(" k8s学习笔记")]),e._v(" "),a("h1",{attrs:{id:"kubernetes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[e._v("#")]),e._v(" Kubernetes")]),e._v(" "),a("p",[e._v("官方中文文档 https://kubernetes.io/zh/")]),e._v(" "),a("p",[e._v("关闭swap")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#关闭sawp分区 (可以不关闭,使用参数--ignore-preflight-errors=swap)#临时关闭swapoff -avi /etc/fstab#注释掉swap分区#/dev/mapper/centos-swap swap\n")])])]),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("h3",{attrs:{id:"配置阿里云kuberbetes的yum源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置阿里云kuberbetes的yum源"}},[e._v("#")]),e._v(" 配置阿里云kuberbetes的yum源")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cat > /etc/yum.repos.d/kubernetes.repo << EOF[kubernetes]name=kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttps://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF\n")])])]),a("h3",{attrs:{id:"安装kubeadm、kubelet和kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装kubeadm、kubelet和kubectl"}},[e._v("#")]),e._v(" 安装kubeadm、kubelet和kubectl")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum list|grep kubeyum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3\n")])])]),a("p",[e._v("设置开机启动")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl enable kubeletsystemctl start kubelet\n")])])]),a("h3",{attrs:{id:"master节点初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master节点初始化"}},[e._v("#")]),e._v(" master节点初始化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubeadm init \\--apiserver-advertise-address=192.168.53.201 \\--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \\--kubernetes-version v1.17.3 \\--service-cidr=192.96.0.0/16 \\--pod-network-cidr=192.244.0.0/16如果有[ERROR NumCPU]: the number of available CPUs 1 is less than the required 2 这种报错自己虚拟机可以加下面指令忽略--ignore-preflight-errors=all默认会从k8s.gcr.io拉取,指定了阿里云镜像仓库,但是无法看到拉取过程,所以可以先用下方脚本拉取镜像,在执行这段初始化1.成功后提示要执行创建配置文件,执行:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/config2.安装一个网络插件  kubectl apply -f \\  https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml  这个地址可能无法下载,可以使用下载好的yml执行   kubectl apply -f kube-flannel.yml   应用本地的文件安装   kubectl delete -f kube-flannel.yml  根据本地文件进行删除3.成功后信息最后会给出一个两个小时有效的token  用来加入主节点,例:kubeadm join 192.168.53.201:6443 --token 23lclp.2wf76821pjjk6k7a \\    --discovery-token-ca-cert-hash sha256:213fee1ffe0141c0f16baf244edea549db32e933d083402d19edebb271d6017f如果这个过期可以主动重新获取(下面这个是永久的)kubeadm token create --ttl 0 --print-join-command其他命令:kubectl get pods   从默认空间获取pod列表kubectl get pods --all-namespaces  获取所有命名空间的podkubectl get ns  获取命名空间列表kubectl get nodes  获取集群所有节点\n")])])]),a("p",[e._v("master节点所要用的docker镜像 shell脚本内容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#!/bin/bashimages=(    kube-apiserver:v1.17.3    kube-proxy:v1.17.3    kube-controller-manager:v1.17.3    kube-scheduler:v1.17.3    coredns:1.6.5    etcd:3.4.3-0    pause:3.1)for imageName in ${images[@]} ; do    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName#   docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName  打标签成k8s下载的可以省掉上面的仓库地址done\n")])])]),a("h3",{attrs:{id:"从节点加入主节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从节点加入主节点"}},[e._v("#")]),e._v(" 从节点加入主节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.在主节点执行命令获取tokenkubeadm token create --ttl 0 --print-join-command2.在从节点执行上条命令的响应从而加入集群kubeadm join 192.168.53.201:6443 --token 23lclp.2wf76821pjjk6k7a \\    --discovery-token-ca-cert-hash sha256:213fee1ffe0141c0f16baf244edea549db32e933d083402d19edebb271d6017f\n")])])]),a("p",[e._v("其他")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//检查kubelet是否启动systemctl status kubelet\n")])])]),a("h2",{attrs:{id:"操作kubernetes集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作kubernetes集群"}},[e._v("#")]),e._v(" 操作kubernetes集群")]),e._v(" "),a("h3",{attrs:{id:"部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[e._v("#")]),e._v(" 部署")]),e._v(" "),a("p",[e._v("1.部署一个tomcat")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# kubectl create deployment 部署名字 --image=指定镜像kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8kubectl get pods -o wide  可以获取tomcat部署信息\n")])])]),a("p",[e._v("2.暴露端口访问")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl expose deployment tomcat6 --port=80 --target-port=8080 --type=NodePortPod的80端口映射容器的8080; service会代理Pod的80kubectl get svc -o wide  或  kubectl get svc 查看service的端口情况根据部署node的ip和这个端口就可以访问服务\n")])])]),a("p",[e._v("3.动态扩容/缩容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl scale --replicas=3 deployment tomcat6将tomcat6部署扩容至3份副本数改小既缩容\n")])])]),a("p",[e._v("4.删除")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl get all  看所有资源\n\nkubectl delete name   根据资源name进行删除,如果删除deployment部署级别的那么关联的pod等也会删除,相关service会保留但不可用\n")])])]),a("h2",{attrs:{id:"kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl"}},[e._v("#")]),e._v(" kubectl")]),e._v(" "),a("p",[e._v("kubectl官方文档 https://kubernetes.io/zh/docs/reference/kubectl/overview/")]),e._v(" "),a("p",[e._v("命令参考 https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands")]),e._v(" "),a("h2",{attrs:{id:"yaml语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yaml语法"}},[e._v("#")]),e._v(" yaml语法")]),e._v(" "),a("h3",{attrs:{id:"模板-以tomcat部署为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板-以tomcat部署为例"}},[e._v("#")]),e._v(" 模板 (以tomcat部署为例)")]),e._v(" "),a("p",[e._v("kubectl create deployment tomcat6 –image=tomcat:6.0.53-jre8 –dry-run -o yaml > tomcat6.yaml 输出部署信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apiVersion: apps/v1kind: Deploymentmetadata:  creationTimestamp: null  labels:    app: tomcat6  name: tomcat6spec:  replicas: 1  selector:    matchLabels:      app: tomcat6  strategy: {}  template:    metadata:      creationTimestamp: null      labels:        app: tomcat6    spec:      containers:      - image: tomcat:6.0.53-jre8        name: tomcat        resources: {}status: {}\n")])])]),a("p",[e._v("systemctl stop firewalld –dry-run -o yaml 输出暴露信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#以下信息可以和部署信息放在一个yaml中,中间通过---分割apiVersion: v1kind: Servicemetadata:  creationTimestamp: null  labels:    app: tomcat6  name: tomcat6spec:  ports:  - port: 80    protocol: TCP    targetPort: 8080  selector:    app: tomcat6  type: NodePort\n")])])]),a("h2",{attrs:{id:"ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ingress"}},[e._v("#")]),e._v(" ingress")]),e._v(" "),a("h3",{attrs:{id:"部署ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署ingress"}},[e._v("#")]),e._v(" 部署ingress")]),e._v(" "),a("p",[e._v("yaml文件内容:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('apiVersion: v1kind: Namespacemetadata:  name: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata:  name: nginx-configuration  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata:  name: tcp-services  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata:  name: udp-services  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx---apiVersion: v1kind: ServiceAccountmetadata:  name: nginx-ingress-serviceaccount  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata:  name: nginx-ingress-clusterrole  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginxrules:  - apiGroups:      - ""    resources:      - configmaps      - endpoints      - nodes      - pods      - secrets    verbs:      - list      - watch  - apiGroups:      - ""    resources:      - nodes    verbs:      - get  - apiGroups:      - ""    resources:      - services    verbs:      - get      - list      - watch  - apiGroups:      - "extensions"    resources:      - ingresses    verbs:      - get      - list      - watch  - apiGroups:      - ""    resources:      - events    verbs:      - create      - patch  - apiGroups:      - "extensions"    resources:      - ingresses/status    verbs:      - update---apiVersion: rbac.authorization.k8s.io/v1beta1kind: Rolemetadata:  name: nginx-ingress-role  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginxrules:  - apiGroups:      - ""    resources:      - configmaps      - pods      - secrets      - namespaces    verbs:      - get  - apiGroups:      - ""    resources:      - configmaps    resourceNames:      # Defaults to "<election-id>-<ingress-class>"      # Here: "<ingress-controller-leader>-<nginx>"      # This has to be adapted if you change either parameter      # when launching the nginx-ingress-controller.      - "ingress-controller-leader-nginx"    verbs:      - get      - update  - apiGroups:      - ""    resources:      - configmaps    verbs:      - create  - apiGroups:      - ""    resources:      - endpoints    verbs:      - get---apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBindingmetadata:  name: nginx-ingress-role-nisa-binding  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginxroleRef:  apiGroup: rbac.authorization.k8s.io  kind: Role  name: nginx-ingress-rolesubjects:  - kind: ServiceAccount    name: nginx-ingress-serviceaccount    namespace: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata:  name: nginx-ingress-clusterrole-nisa-binding  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginxroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: nginx-ingress-clusterrolesubjects:  - kind: ServiceAccount    name: nginx-ingress-serviceaccount    namespace: ingress-nginx---apiVersion: apps/v1kind: DaemonSetmetadata:  name: nginx-ingress-controller  namespace: ingress-nginx  labels:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginxspec:  selector:    matchLabels:      app.kubernetes.io/name: ingress-nginx      app.kubernetes.io/part-of: ingress-nginx  template:    metadata:      labels:        app.kubernetes.io/name: ingress-nginx        app.kubernetes.io/part-of: ingress-nginx      annotations:        prometheus.io/port: "10254"        prometheus.io/scrape: "true"    spec:      hostNetwork: true      serviceAccountName: nginx-ingress-serviceaccount      containers:        - name: nginx-ingress-controller          image: siriuszg/nginx-ingress-controller:0.20.0          args:            - /nginx-ingress-controller            - --configmap=$(POD_NAMESPACE)/nginx-configuration            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services            - --publish-service=$(POD_NAMESPACE)/ingress-nginx            - --annotations-prefix=nginx.ingress.kubernetes.io          securityContext:            allowPrivilegeEscalation: true            capabilities:              drop:                - ALL              add:                - NET_BIND_SERVICE            # www-data -> 33            runAsUser: 33          env:            - name: POD_NAME              valueFrom:                fieldRef:                  fieldPath: metadata.name            - name: POD_NAMESPACE              valueFrom:                fieldRef:                  fieldPath: metadata.namespace          ports:            - name: http              containerPort: 80            - name: https              containerPort: 443          livenessProbe:            failureThreshold: 3            httpGet:              path: /healthz              port: 10254              scheme: HTTP            initialDelaySeconds: 10            periodSeconds: 10            successThreshold: 1            timeoutSeconds: 10          readinessProbe:            failureThreshold: 3            httpGet:              path: /healthz              port: 10254              scheme: HTTP            periodSeconds: 10            successThreshold: 1            timeoutSeconds: 10---apiVersion: v1kind: Servicemetadata:  name: ingress-nginx  namespace: ingress-nginxspec:  #type: NodePort  ports:  - name: http    port: 80    targetPort: 80    protocol: TCP  - name: https    port: 443    targetPort: 443    protocol: TCP  selector:    app.kubernetes.io/name: ingress-nginx    app.kubernetes.io/part-of: ingress-nginx\n')])])]),a("h3",{attrs:{id:"创建ingress规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建ingress规则"}},[e._v("#")]),e._v(" 创建ingress规则")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apiVersion: extensions/v1beta1kind: Ingressmetadata:  name: webspec:  rules:  - host: tomcat6.zsk.com   需要在本机host文件添加域名映射到某个节点ip    http:      paths:        - backend:           serviceName: tomcat6           servicePort: 80\n")])])]),a("h2",{attrs:{id:"安装可视化界面-失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装可视化界面-失败"}},[e._v("#")]),e._v(" 安装可视化界面 失败")]),e._v(" "),a("h3",{attrs:{id:"_1-部署kubesphere"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-部署kubesphere"}},[e._v("#")]),e._v(" 1.部署kubeSphere")]),e._v(" "),a("p",[e._v("官方文档: https://v2-1.docs.kubesphere.io/docs/zh-CN/installation/prerequisites/")]),e._v(" "),a("p",[e._v("1.安装helm(master执行)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#验证是否已经安装helm version#安装$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3$ chmod 700 get_helm.sh$ ./get_helm.sh或者curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n")])])]),a("p",[e._v("2.该权限")]),e._v(" "),a("p",[e._v("yaml文件内容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apiVersion: v1kind: ServiceAccountmetadata:  name: tiller  namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: tillerroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:  - kind: ServiceAccount    name: tiller    namespace: kube-system\n")])])]),a("p",[e._v("3.安装tiller(master执行)")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("初始化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("helm init --service-account=tiller --tiller-image=sapcc/tiller:v2.16.3 --history-max 300\n")])])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);