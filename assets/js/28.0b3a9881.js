(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{247:function(t,a,e){t.exports=e.p+"assets/img/image-20220106223828639.841b90e0.png"},433:function(t,a,e){"use strict";e.r(a);var r=e(3),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"状态模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[t._v("#")]),t._v(" 状态模式")]),t._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。")]),t._v(" "),a("p",[t._v("在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。")]),t._v(" "),a("p",[t._v("状态模式的设计思想是把不同状态的逻辑分离到不同的状态类中，从而使得增加新状态更容易；")]),t._v(" "),a("p",[t._v("状态模式的实现关键在于状态转换。简单的状态转换可以直接由调用方指定，复杂的状态转换可以在内部根据条件触发完成")]),t._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),a("p",[t._v("以小傅哥中举例的审核流程为例, 过程环节多, 并且每个环节的流转状态各不相同")]),t._v(" "),a("p",[t._v("如果我们通过ifelse去写, 很难维护")]),t._v(" "),a("p",[a("img",{attrs:{src:e(247),alt:"../../../img//other/image-20220106223828639.png"}})]),t._v(" "),a("p",[t._v("工程结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n")])])]),a("h3",{attrs:{id:"定义状态接口-抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义状态接口-抽象类"}},[t._v("#")]),t._v(" 定义状态接口/抽象类")]),t._v(" "),a("p",[t._v("里面定义流程中所有的动作，比如提交，审批，撤回等等; 如果要规定某个动作有共同的实现, 可以使用抽象类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public abstract class State {    /**     * 活动提审     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result arraignment(String activityId, Enum<Status> currentStatus);    /**     * 审核通过     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result checkPass(String activityId, Enum<Status> currentStatus);    /**     * 审核拒绝     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result checkRefuse(String activityId, Enum<Status> currentStatus);    /**     * 撤审撤销     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result checkRevoke(String activityId, Enum<Status> currentStatus);    /**     * 活动关闭     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result close(String activityId, Enum<Status> currentStatus);    /**     * 活动开启     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result open(String activityId, Enum<Status> currentStatus);    /**     * 活动执行     *     * @param activityId    活动ID     * @param currentStatus 当前状态     * @return 执行结果     */    public abstract Result doing(String activityId, Enum<Status> currentStatus);}\n")])])]),a("h3",{attrs:{id:"每个状态的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每个状态的实现"}},[t._v("#")]),t._v(" 每个状态的实现")]),t._v(" "),a("p",[t._v("继承超类, 通过重写各个动作, 实现一个动作在不同状态时有不同的效果")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public class EditingState extends State {    public Result arraignment(String activityId, Enum<Status> currentStatus) {        ActivityService.execStatus(activityId, currentStatus, Status.Check);        return new Result("0000", "活动提审成功");    }    public Result checkPass(String activityId, Enum<Status> currentStatus) {        return new Result("0001", "编辑中不可审核通过");    }    public Result checkRefuse(String activityId, Enum<Status> currentStatus) {        return new Result("0001", "编辑中不可审核拒绝");    }    @Override    public Result checkRevoke(String activityId, Enum<Status> currentStatus) {        return new Result("0001", "编辑中不可撤销审核");    }    public Result close(String activityId, Enum<Status> currentStatus) {        ActivityService.execStatus(activityId, currentStatus, Status.Close);        return new Result("0000", "活动关闭成功");    }    public Result open(String activityId, Enum<Status> currentStatus) {        return new Result("0001", "非关闭活动不可开启");    }    public Result doing(String activityId, Enum<Status> currentStatus) {        return new Result("0001", "编辑中活动不可执行活动中变更");    }}\n')])])]),a("h3",{attrs:{id:"状态处理类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态处理类"}},[t._v("#")]),t._v(" 状态处理类")]),t._v(" "),a("p",[t._v("因为我们有不同的状态,所以需要内部判断当前所在状态, 从而找到对应实现类从而执行动作")]),t._v(" "),a("p",[t._v("这是对状态服务的统一控制中心，可以看到在构造函数中提供了所有状态和实现的具体关联，放到Map数据结构中。同时提供了不同名称的接口操作类，让外部调用方可以更加容易的使用此项功能接口")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public class StateHandler {    private Map<Enum<Status>, State> stateMap = new ConcurrentHashMap<Enum<Status>, State>();    public StateHandler() {        stateMap.put(Status.Check, new CheckState());     // 待审核        stateMap.put(Status.Close, new CloseState());     // 已关闭        stateMap.put(Status.Doing, new DoingState());     // 活动中        stateMap.put(Status.Editing, new EditingState()); // 编辑中        stateMap.put(Status.Open, new OpenState());       // 已开启        stateMap.put(Status.Pass, new PassState());       // 审核通过        stateMap.put(Status.Refuse, new RefuseState());   // 审核拒绝    }    public Result arraignment(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).arraignment(activityId, currentStatus);    }    public Result checkPass(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).checkPass(activityId, currentStatus);    }    public Result checkRefuse(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).checkRefuse(activityId, currentStatus);    }    public Result checkRevoke(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).checkRevoke(activityId, currentStatus);    }    public Result close(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).close(activityId, currentStatus);    }    public Result open(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).open(activityId, currentStatus);    }    public Result doing(String activityId, Enum<Status> currentStatus) {        return stateMap.get(currentStatus).doing(activityId, currentStatus);    }}\n")])])]),a("h3",{attrs:{id:"调用test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用test"}},[t._v("#")]),t._v(" 调用test")]),t._v(" "),a("p",[t._v("调用状态处理类, 而不是直接调用实现类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("stateHandler.arraignment(activityId, Status.Editing);\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);