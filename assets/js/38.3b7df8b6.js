(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{352:function(a,s,t){"use strict";t.r(s);var e=t(3),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[a._v("#")]),a._v(" Spring")]),a._v(" "),s("h3",{attrs:{id:"循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[a._v("#")]),a._v(" 循环依赖")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("什么是循环依赖")]),a._v(" "),s("p",[a._v("多个bean之间相互依赖, 形成一个闭环")]),a._v(" "),s("p",[a._v("通常问spring容器内部如何解决循环依赖, 一定是指默认的单例bean中,属性相互引用的场景")]),a._v(" "),s("p",[a._v("构造方法注入没办法解决循环依赖, 推荐使用set注入")])])]),a._v(" "),s("h3",{attrs:{id:"三级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三级缓存"}},[a._v("#")]),a._v(" 三级缓存")]),a._v(" "),s("p",[a._v("spring内部通过3级缓存来解决循环依赖   "),s("code",[a._v("DefaultSingletonBeanRegistry")])]),a._v(" "),s("p",[s("code",[a._v("DefaultSingletonBeanRegistry")]),a._v("中的三个map便是三个缓存")]),a._v(" "),s("p",[a._v("一级缓存: 也叫单例池, 存放已经经历了完整生命周期的bean对象")]),a._v(" "),s("p",[a._v("二级缓存: 存放早期暴露出来的bean对象, bean的生命周期未结束, 属性还没有填充完")]),a._v(" "),s("p",[a._v("三级缓存: 存放可以生成bean的工厂")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** Cache of singleton objects: bean name to bean instance. */")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//一级缓存")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" singletonObjects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** Cache of singleton factories: bean name to ObjectFactory. */")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//三级缓存")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" singletonFactories "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/** Cache of early singleton objects: bean name to bean instance. */")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//二级缓存")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" earlySingletonObjects "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("流程:")]),a._v(" "),s("ol",[s("li",[a._v("A创建过程中需要B, 于是A将自己放入三级缓存中, 去实例化B")]),a._v(" "),s("li",[a._v("B实例化时需要A, 于是B先查一级缓存, 没有再查二级缓存, 还没有再查三级缓存, 找到A, 然后将三级缓存中的A放到二级缓存, 并删除三级缓存的A")]),a._v(" "),s("li",[a._v("B顺利初始化完毕, 将自己放到一级缓存中(B中的A仍然是创建中状态), 然后回来继续创建A, 此时直接从一介缓存中拿到B ,完成创建, 将A放入一级缓存")])]),a._v(" "),s("p",[a._v('Spring解决循环依赖依靠的是bean的"中间态”这个概念, 而这个中间态指的是已经实例化但还没有初始化的状态—>半成品')]),a._v(" "),s("p",[a._v("实例化的过程又是通过构造器创建的, 如果A还没有创建好怎么可能提前暴露出来呢, 所以构造器的循环依赖无法解决")]),a._v(" "),s("p",[a._v("一级缓存为单例池")]),a._v(" "),s("p",[a._v("二级缓存是为了提前暴露对象")]),a._v(" "),s("p",[a._v("三级缓存是为了提前曝光工厂")]),a._v(" "),s("p",[s("img",{attrs:{src:"/img/spring/1.png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"bean的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期"}},[a._v("#")]),a._v(" bean的生命周期")]),a._v(" "),s("ol",[s("li",[a._v("通过构造器创建bean实例(无参构造)")]),a._v(" "),s("li",[a._v("为bean的属性设置值和对其他bean的引用(调用set方法)")]),a._v(" "),s("li",[a._v("把bean实例传递bean后置处理器的方法postProcessBeforeInitalization, 也就是调用BeanPostProcessor初始化前的方法.")]),a._v(" "),s("li",[a._v("调用Bean的初始化方法(需要进行配置初始化的方法)")]),a._v(" "),s("li",[a._v("把bean实例传递bean后置处理器的方法postProcessAfterInitialization, 也就是调用BeanPostProcessor初始化后方法")]),a._v(" "),s("li",[a._v("bean可以使用了")]),a._v(" "),s("li",[a._v("当bean容器关闭的时候, 调用bean的销毁方法(需要进行配置销毁方法)")])]),a._v(" "),s("h3",{attrs:{id:"springbean加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springbean加载过程"}},[a._v("#")]),a._v(" springBean加载过程")]),a._v(" "),s("ol",[s("li",[a._v("获取配置文件")]),a._v(" "),s("li",[a._v("解析配置文件并注册bean")]),a._v(" "),s("li",[a._v("实例化bean")]),a._v(" "),s("li",[a._v("调用对象方法")])]),a._v(" "),s("h3",{attrs:{id:"springmvc-的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-的工作流程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("SpringMVC 的工作流程")])]),a._v(" "),s("p",[a._v("（1）用户发送请求至前端控制器 DispatcherServlet。")]),a._v(" "),s("p",[a._v("（2） DispatcherServlet 收到请求后，调用 HandlerMapping 处理器映射器，请求获取 Handle。")]),a._v(" "),s("p",[a._v("（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet。")]),a._v(" "),s("p",[a._v("（4）DispatcherServlet 调用 HandlerAdapter处理器适配器。")]),a._v(" "),s("p",[a._v("（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)。")]),a._v(" "),s("p",[a._v("（6）Handler 执行完成返回 ModelAndView。")]),a._v(" "),s("p",[a._v("（7）HandlerAdapter 将 Handler 执行结果 ModelAndView 返回给 DispatcherServlet。")]),a._v(" "),s("p",[a._v("（8）DispatcherServlet 将 ModelAndView 传给 ViewResolver 视图解析器进行解析。")]),a._v(" "),s("p",[a._v("（9）ViewResolver 解析后返回具体 View。")]),a._v(" "),s("p",[a._v("（10）DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）。")]),a._v(" "),s("p",[a._v("（11）DispatcherServlet 响应用户。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/img/spring/2.png",alt:""}})])])}),[],!1,null,null,null);s.default=n.exports}}]);