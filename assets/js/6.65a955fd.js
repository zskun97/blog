(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{319:function(t,a,v){"use strict";v.r(a);var _=v(3),e=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ddd抽奖系统学习打卡🚀-day-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd抽奖系统学习打卡🚀-day-1"}},[t._v("#")]),t._v(" DDD抽奖系统学习打卡🚀 day 1")]),t._v(" "),a("p",[t._v("Created: January 30, 2022 8:54 AM")]),t._v(" "),a("p",[t._v("小傅哥项目文档 https://gitcode.net/KnowledgePlanet/Lottery/-/wikis/home 以下是前六节摘抄的笔记")]),t._v(" "),a("h1",{attrs:{id:"ddd四层架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd四层架构"}},[t._v("#")]),t._v(" DDD四层架构")]),t._v(" "),a("h2",{attrs:{id:"服务架构调用关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务架构调用关系"}},[t._v("#")]),t._v(" 服务架构调用关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/other/image-20220105223746408.png",alt:"/img/other/image-20220105223746408.png"}})]),t._v(" "),a("p",[t._v("image-20220105223746408")]),t._v(" "),a("p",[t._v("接口层{interfaces}")]),t._v(" "),a("ul",[a("li",[t._v("接口服务位于用户接口层，用于处理用户发送的Restful请求和解析用户输入的配置文件等，并将信息传递给应用层。")])]),t._v(" "),a("p",[t._v("应用层{application}")]),t._v(" "),a("ul",[a("li",[t._v("应用服务位于应用层。用来表述应用和用户行为，负责服务的组合、编排和转发，负责处理业务用例的执行顺序以及结果的拼装。")]),t._v(" "),a("li",[t._v("应用层的服务包括应用服务和领域事件相关服务。")]),t._v(" "),a("li",[t._v("应用服务可对微服务内的领域服务以及微服务外的应用服务进行组合和编排，或者对基础层如文件、缓存等数据直接操作形成应用服务，对外提供粗粒度的服务。")]),t._v(" "),a("li",[t._v("领域事件服务包括两类：领域事件的发布和订阅。通过事件总线和消息队列实现异步数据传输，实现微服务之间的解耦。")])]),t._v(" "),a("p",[t._v("领域层{domain}")]),t._v(" "),a("ul",[a("li",[t._v("领域服务位于领域层，为完成领域中跨实体或值对象的操作转换而封装的服务，领域服务以与实体和值对象相同的方式参与实施过程。")]),t._v(" "),a("li",[t._v("领域服务对同一个实体的一个或多个方法进行组合和封装，或对多个不同实体的操作进行组合或编排，对外暴露成领域服务。领域服务封装了核心的业务逻辑。实体自身的行为在实体类内部实现，向上封装成领域服务暴露。")]),t._v(" "),a("li",[t._v("为隐藏领域层的业务逻辑实现，所有领域方法和服务等均须通过领域服务对外暴露。")]),t._v(" "),a("li",[t._v("为实现微服务内聚合之间的解耦，原则上禁止跨聚合的领域服务调用和跨聚合的数据相互关联。")])]),t._v(" "),a("p",[t._v("基础层{infrastructure}")]),t._v(" "),a("ul",[a("li",[t._v("基础服务位于基础层。为各层提供资源服务（如数据库、缓存等），实现各层的解耦，降低外部资源变化对业务逻辑的影响。")]),t._v(" "),a("li",[t._v("基础服务主要为仓储服务，通过依赖反转的方式为各层提供基础资源服务，领域服务和应用服务调用仓储服务接口，利用仓储实现持久化数据对象或直接访问基础资源。")])]),t._v(" "),a("h2",{attrs:{id:"模块关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块关系"}},[t._v("#")]),t._v(" 模块关系")]),t._v(" "),a("p",[t._v("（这部分是自己通俗理解，可能有错误，后续会修改）")]),t._v(" "),a("p",[t._v("接口层：依赖应用层，封装成对外提供服务的接口")]),t._v(" "),a("p",[t._v("应用层：依赖领域层，业务逻辑的封装，根据业务编排多个领域")]),t._v(" "),a("p",[t._v("领域层：封装了具体业务领域的功能实现，比如抽奖逻辑领域，发奖领域，单个领域内聚合")]),t._v(" "),a("p",[t._v("基础层：依赖领域层，去实现领域的数据仓储接口； 直接对接数据层 比如数据库，redis缓存，es等等")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/other/image-20220106225506734.png",alt:"/img/other/image-20220106225506734.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/other/image-20220105224400773.png",alt:"/img/other/image-20220105224400773.png"}})]),t._v(" "),a("p",[t._v("image-20220105224400773")]),t._v(" "),a("h2",{attrs:{id:"项目代码结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目代码结构"}},[t._v("#")]),t._v(" 项目代码结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/other/image-20220105225312961.png",alt:"/img/other/image-20220105225312961.png"}})]),t._v(" "),a("p",[t._v("image-20220105225312961")]),t._v(" "),a("h3",{attrs:{id:"领域模块结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域模块结构"}},[t._v("#")]),t._v(" 领域模块结构")]),t._v(" "),a("p",[t._v("model，用于提供vo、req、res 和 aggregates 聚合对象。")]),t._v(" "),a("p",[t._v("repository，提供仓储服务，其实也就是对Mysql、Redis等数据的统一包装。这里指定义接口不做实现")]),t._v(" "),a("p",[t._v("service，是具体的业务领域逻辑实现层，在这个包下定义了algorithm抽奖算法实现和具体的抽奖策略包装 draw 层，对外提供抽奖接口 IDrawExec#doDrawExec")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/other/image-20220105225722383.png",alt:"/img/other/image-20220105225722383.png"}})]),t._v(" "),a("p",[t._v("image-20220105225722383")])])}),[],!1,null,null,null);a.default=e.exports}}]);